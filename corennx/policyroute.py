#
# CORE
# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.
#
''' Sample user-defined service.
'''

import os

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class MyServicePR(CoreService):
    ''' This is a sample user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "policyroute"
    # you can create your own group here
    _group = "Ninux"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ('/etc/ninux',)
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('etc/ninux/polroute.sh', )
    # this controls the starting order vs other enabled services
    _startindex = 51
    # list of startup commands, also may be generated during startup
    _startup = ('/bin/sh /etc/ninux/polroute.sh',)
    # list of shutdown commands
    _shutdown = ()

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        cfg = "#Autogenerated file\n"
	cfg += '''\
#Copy local routes only from table main 254 to table 110
ip route show table 254 | grep -Ev ^default | grep -Ev ^blackhole |
while read ROUTE ; do
MASK=`echo "${ROUTE}" | awk '{print $1}' | awk -F/ '{print $2}'`
if [ "$MASK" -ne 16 ] ; then
ip route add table 110 $ROUTE
fi
done
#Sposto la rotta di default
DEF_ROUTE=`ip route show table 254 | grep ^default`
if [ -n "$DEF_ROUTE" ] ; then
ip route add table 224 $DEF_ROUTE
ip route del table 254 $DEF_ROUTE
fi
#Fiirst evaluate local routes
ip rule add from all lookup 110 pref 30
#Private routes to OLSRv2 table
ip rule add to 10.16.0.0/14 table 111 pref 35
#Private routes to OLSRv1 table
ip rule add to 10.0.0.0/8 table 222 pref 40
ip rule add to 172.16.0.0/12 table 222 pref 40
ip rule add to 192.168.0.0/16 table 222 pref 40
#Ninux IP Addresses to OLSRv2 table
#ip rule add to <AUTOMATIC> table 111 pref 41
#ip rule add from <AUTOMATIC> table 111 pref 41
#Ninux IP Address to OLSR v1
ip rule add to 176.62.53.0/24 table 222 pref 42
ip rule add from 176.62.53.0/24 table 222 pref 42
#main and blackholes
ip rule add from all lookup 254 pref 60
#Lookup default route first from user and then from OLSR
\n\
'''
	for ifc in node.netifs():
		if not(hasattr(ifc.net, 'type')):
            		cfg += "\n".join(map(cls.subnetentry, ifc.addrlist))



	cfg+='''\
#default annunciata su olsrV2 (ipotesi chi ha V1 ha anche v2)
ip rule add from 10.16.0.0/14 lookup 112 pref 85
#Percorso verso i BGP dei pubblici
#ip rule add from <AUTOMATIC> lookup 150 pref 90
ip rule add iif lo lookup 224 pref 91
#default annunciata su olsrV1
ip rule add from all lookup 223 pref 100
#Blackhole private aggregates
ip route add blackhole 10.0.0.0/8 table 254
ip route add blackhole 172.16.0.0/12 table 254
ip route add blackhole 192.168.0.0/16 table 254

#Blackhole Ninux aggregate
ip route add blackhole 176.62.53.0/24 table 254
'''
        return cfg

    @staticmethod
    def subnetentry(x):
        ''' Generate a subnet declaration block given an IPv4 prefix string
            for inclusion in the config file.
	'''
        if x.find(":") >= 0:
            # this is an IPv6 address
            return ''
        else:
            net = IPv4Prefix(x)
            return 'ip rule add from %s table 224 pref 80' % (net)


# this line is required to add the above class to the list of available services
addservice(MyServicePR)

